PHASE 1: ORACLE & CORE SMART CONTRACT INTERACTION (Approx. 3-4 hours)
Goal: Get your simulated IoT data feeding into the blockchain. This is your "backend" transaction generator.
Python Script Setup (IoT Oracle):
Create a new Python project/folder.
Install web3.py and python-dotenv: pip install web3 python-dotenv
Create a .env file for your Python script:
code
Code
GANACHE_RPC_URL=http://127.0.0.1:7545
CONTRACT_ADDRESS=0xYourDeployedContractAddress
ORACLE_PRIVATE_KEY=0xYourGanacheAccountPrivateKeyForOracle
In your Python script (iot_oracle.py):
Import Web3, load environment variables.
Connect to Ganache using Web3(Web3.HTTPProvider(GANACHE_RPC_URL)).
Load your contract using w3.eth.contract(address=CONTRACT_ADDRESS, abi=ABI_JSON).
Implement updateTemperature call:
Create a mock CSV/list of (timestamp, temp, location) data.
Loop through this data.
For each data point, construct a transaction to call contract.functions.updateTemperature(shipmentID, currentTemp, location).
Sign the transaction with ORACLE_PRIVATE_KEY.
Send the raw transaction: w3.eth.send_raw_transaction(signed_tx.rawTransaction).
Add a time.sleep(X) to simulate time intervals.
Concept coverage: This demonstrates Wallet creation & transaction generation/signing, Broadcasting to the P2P network (your Ganache node), Mempool handling (transactions wait to be mined), and Smart contract execution & state update.
Basic Contract Functionality Testing:
Run your iot_oracle.py script.
Observe Ganache GUI: You should see transactions being mined, new blocks created, and the world state changing.
In Remix, connect to your Ganache environment. Call getShipment with a shipmentID to confirm tempHistory is being updated and status changes if a fault occurs.